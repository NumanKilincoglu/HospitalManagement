@using Microsoft.Extensions.Localization
@using Pusula.Training.HealthCare.Localization
@using Pusula.Training.HealthCare.Patients

<Card @onclick="() => OnDoctorSelect.InvokeAsync(DoctorModel)"
      Class="@(GetDoctorCardClass?.Invoke(DoctorModel) ?? "")">
    <CardBody Class="p-0">
        <div class="d-flex gap-1">
            <div class="d-flex gap-1 align-bottom f1">
                <div class="availability"
                     style="background-color: @(DoctorModel.IsAvailable ? "var(--bs-success)" : "var(--bs-danger)");">
                </div>
                <div class="user-profile-bg rounded-circle text-center align-content-center justify-content-center">
                    <Icon TextColor="TextColor.Black50"
                          IconSize="IconSize.Large"
                          Name="IconName.User">
                    </Icon>
                </div>
                <div class="d-flex flex-column">
                    <h6 class="m-0 text-center fw-semibold">@DoctorModel.Name</h6>
                    <Badge
                        Color="@(DoctorModel.Gender== EnumGender.MALE ? Color.Primary : Color.Danger)"
                        Border="Blazorise.Border.Is1"
                        TextWeight="TextWeight.Normal"
                        TextSize="TextSize.ExtraSmall"
                        Width="Width.Px(25)">
                        @(DoctorModel.Gender== EnumGender.MALE ? @L["Gender:M"] : @L["Gender:F"])
                    </Badge>
                </div>
            </div>
            <div class="f1">
                <h6 class="m-0 text-start fw-normal">@DoctorModel.Department</h6>
            </div>
        </div>
        @if (DoctorModel.IsSelected)
        {
            <div class="selected-tag">
                <Icon Name="IconName.Check" IconSize="IconSize.Large" TextColor="TextColor.Light"></Icon>
            </div>
        }
    </CardBody>
</Card>

@inject IStringLocalizer<HealthCareResource> L

@code {
    [Parameter] public DoctorModel DoctorModel { get; set; } = null!;
    [Parameter] public EventCallback<DoctorModel> OnDoctorSelect { get; set; }
    [Parameter] public Func<DoctorModel, string>? GetDoctorCardClass { get; set; }
}