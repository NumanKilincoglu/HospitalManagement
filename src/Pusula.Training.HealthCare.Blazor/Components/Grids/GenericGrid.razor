@typeparam TModel

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons

<SfGrid @ref="GridRef" TValue="TModel" AllowPaging="true" AllowSorting="true" AllowFiltering="false" Query="@Query">
    <SfDataManager AdaptorInstance="@AdaptorInstance" Adaptor="AdaptorType">
    </SfDataManager>
    <GridPageSettings PageSize="@PageSize"></GridPageSettings>
    <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="false"></GridEditSettings>
    <GridColumns >
        @foreach (var column in Columns)
        {
            <GridColumn Field="@column.Field" HeaderText="@column.HeaderText" Width="@column.Width" TextAlign="@column.TextAlign" >
            </GridColumn>
           
        }
        <GridColumn HeaderText="Actions" Width="150px">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit"
                                   ButtonOption="@(new CommandButtonOptions { IconCss = "e-icons e-edit", CssClass = "e-flat" })">
                </GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Delete"
                                   ButtonOption="@(new CommandButtonOptions { IconCss = "e-icons e-delete", CssClass = "e-flat" })">
                </GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Save"
                                   ButtonOption="@(new CommandButtonOptions { IconCss = "e-icons e-save", CssClass = "e-flat" })">
                </GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Cancel"
                                   ButtonOption="@(new CommandButtonOptions { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat" })">
                </GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
    <GridEvents CommandClicked="OnCommandClicked" TValue="TModel"></GridEvents>
</SfGrid>

<SfDialog @bind-Visible="IsDeletePopupVisible" AllowDragging="true" Width="300px" ShowCloseIcon="true" Header="Delete Confirmation">
    <DialogTemplates>
        <Content>
            Are you sure you want to delete this item?
        </Content>
        <FooterTemplate>
            <SfButton CssClass="e-secondary" @onclick="CancelDelete">No</SfButton>
            <SfButton CssClass="e-danger" @onclick="ConfirmDelete">Yes</SfButton>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>


@code {

 //   [Parameter] public IEnumerable<TModel>? Data { get; set; }
    [Parameter] public List<GridColumnDefinition>? Columns { get; set; }
    [Parameter] public EventCallback<TModel> OnEdit { get; set; }
    [Parameter] public EventCallback<TModel> OnDelete { get; set; }
    [Parameter] public Type? AdaptorInstance { get; set; }
    [Parameter] public Adaptors AdaptorType { get; set; } = Adaptors.CustomAdaptor;
    [Parameter] public int PageSize { get; set; } = 8; // Default değer
    // DataManagerRequest için parametre kontrolü
    [Parameter] public string? Filter { get; set; }

    [Parameter] public Query Query { get; set; } 


    private bool IsDeletePopupVisible { get; set; } = false;
    private TModel? SelectedItemToDelete { get; set; }
    private SfGrid<TModel>? GridRef; // Grid için @ref
 
   
    //Bu event, doğrudan grid bileşenine bağlıdır ve bu event'le etkileşime geçmeden gridin içinden hangi butona basıldığını bilemeyiz.
    // Yani, OnCommandClicked, gridin kendi olayını yakalayarak dışarıya doğru bir köprü görevi görür.
    /*
     * Grid içindeki olayları yakalamak.
     * Yakalanan olayları (Edit veya Delete gibi) dışarıya EventCallback olarak yönlendirmek.
     */
    private void OnCommandClicked(CommandClickEventArgs<TModel> args)
    {
        if (args.CommandColumn.Type == CommandButtonType.Edit)
        {
            OnEdit.InvokeAsync(args.RowData);
        }
        else if (args.CommandColumn.Type == CommandButtonType.Delete)
        {
            SelectedItemToDelete = args.RowData;
            IsDeletePopupVisible = true;
        }
    }
  
    private async Task ConfirmDelete()
    {
        if (OnDelete.HasDelegate)
        {
            await OnDelete.InvokeAsync(SelectedItemToDelete);
        }
        IsDeletePopupVisible = false;
    }

    private void CancelDelete()
    {
        SelectedItemToDelete = default;
        IsDeletePopupVisible = false;
    }

    public async Task RefreshGrid()
    {
        if (GridRef != null)
        {
            await GridRef.Refresh();
        }
    }
}
